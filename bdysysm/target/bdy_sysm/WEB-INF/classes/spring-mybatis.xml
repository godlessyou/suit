<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:security="http://www.springframework.org/schema/security"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx" 
    xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd    
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context-4.3.xsd    
                        http://www.springframework.org/schema/mvc    
                        http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
                        http://www.springframework.org/schema/security
                        http://www.springframework.org/schema/security/spring-security-4.2.0.xsd
                        http://www.springframework.org/schema/aop
                        http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
    <!-- 自动扫描 
    <context:component-scan base-package="com.yootii.bdy" />  
    
     --> 
    
   <!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
	<context:component-scan base-package="com.yootii.bdy">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" />
		<context:exclude-filter type="assignable" expression="com.yootii.bdy.util.ProcessEnginUrlConfig"/>  
	</context:component-scan>
    
    <!-- 引入配置文件 -->  
    <context:property-placeholder location="classpath:config.properties" ignore-unresolvable="true"/>
    <context:property-placeholder location="classpath:table_id.properties" ignore-unresolvable="true"/>
    <context:property-placeholder location="classpath:role_permission.properties" ignore-unresolvable="true"/>
    <!-- 导入shiro的配置              
     <import resource="spring-shiro.xml"/>     
    --> 
    
    <!-- tomcat jdbc pool数据源配置 -->          
    <bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close">   
        <property name="poolProperties"> 
            <bean class="org.apache.tomcat.jdbc.pool.PoolProperties">   
                <property name="driverClassName" value="${jdbc.driver}"/> 
                <property name="url" value="${jdbc.url}"/>   
                <property name="username" value="${jdbc.username}"/>   
                <property name="password" value="${jdbc.password}"/>                
                <property name="initialSize" value="${initialSize}"/>   
                <property name="maxActive" value="${maxActive}"/>   
                <property name="maxIdle" value="${maxIdle}"/>     
                <property name="minIdle" value="${minIdle}"/>   
                <property name="maxWait" value="${maxWait}"/> 
				<property name="jmxEnabled" value="${jmxEnabled}"/> 
                <property name="testWhileIdle" value="${testWhileIdle}"/> 
                <property name="testOnBorrow" value="${testOnBorrow}"/>   
                <property name="testOnReturn" value="${testOnReturn}"/>   
                <property name="validationInterval" value="${validationInterval}"/>   
                <property name="validationQuery" value="${validationQuery}"/>   
                <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}"/> 
                <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}"/>  
                <property name="logAbandoned" value="${logAbandoned}"/>   
                <property name="removeAbandoned" value="${removeAbandoned}"/>   
                <property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}"/>                          
            </bean>   
        </property>   
    </bean> 

  
    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <!-- 自动扫描mapping.xml文件 -->  
         <property name="mapperLocations">
         	<list>         		
         		<value>classpath*:com/yootii/*/dao/*.xml</value>
         		<value>classpath*:com/yootii/*/mapping/*.xml</value>
         		<value>classpath*:com/yootii/bdy/*/mapping/*.xml</value>
         	</list>
         </property>
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
    </bean>  
  
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.yootii.bdy.*.dao" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean>  
  <!-- SOLR 属性设置 -->
	<bean id="SolrInfo" class="com.yootii.bdy.solr.SolrInfo">	
		<property name="solrHome" value="${solrHome}" />
		<property name="solrConnectTimeOut" value="${solrConnectTimeOut}" />
		<property name="solrDefaultMaxConnect" value="${solrDefaultMaxConnect}" />
		<property name="solrMaxTotalConnect" value="${solrMaxTotalConnect}" />
		<property name="solrSoTimeOut" value="${solrSoTimeOut}" />
	</bean>    
    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->  
    <bean id="transactionManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>
    <!-- 开启事务控制的注解支持 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- 用来定义哪些类需要事务管理 spring事务动态代理类 BeanNameAutoProxyCreator 根据类名自动代理，接受表达式 -->   
    <bean id="BeanProxy" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">   
        <property name="beanNames">   
            <!-- 对类名以Service结尾的类进行代理
            <value>*Service</value> 
            -->   
            <!-- 目前，只对TmTaskProcessService进行代理 -->  
            <value>TmTaskProcessService</value>   
        </property>   
        <!-- 对代理类进行加载拦截器(实现通知的过程) -->   
        <property name="interceptorNames">   
            <list>   
                <value>transactionInterceptor</value>   
            </list>   
        </property>   
    </bean>   
    
    <!-- 流程引擎的url配置 -->
	<bean id="processEngineUrlConfig" class="com.yootii.bdy.util.ProcessEnginUrlConfig" >
	     <!-- 确认合同信息 -->  
		<property name="processEngineUrl" value="${processEngineUrl}" />				
	</bean>	
	
    
	<!-- 微服务的url -->
	<bean id="serviceUrlConfig" class="com.yootii.bdy.util.ServiceUrlConfig">		
		<property name="processEngineUrl" value="${processEngineUrl}" />
		<property name="bdyautomailUrl" value="${bdyautomailUrl}" />
		<property name="processServiceUrl" value="${processServiceUrl}" />
	</bean>
	
	
    
    
    <!-- 安全管理，密码加密 -->
    <bean id="passwordEncoder"
			class="org.springframework.security.crypto.password.StandardPasswordEncoder">
	</bean>
	
	 <!-- mail 属性设置 -->
	<bean id="mailSenderInfo" class="com.yootii.bdy.mail.MailSenderInfo">	
		<property name="mailServerHost" value="${mailServerHost}" />
		<property name="mailServerPort" value="${mailServerPort}" />
		<property name="fromAddress" value="${fromAddress}" />
		<property name="passwordEncrypt" value="${passwordEncrypt}" />
	</bean>   
	<!-- 系统缓存及登录 -->
	<bean id="sysService" class="com.yootii.bdy.security.service.impl.SysServiceImpl" >
		<property name="expiredSeconds" value="${expiredSeconds}" />
	</bean>	 
	
	
	
   <!-- 配置定时任务 -->    
 
    <!-- 定义调用对象和调用对象的方法 -->
    <bean id="removeTokenTask" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
	   <!-- 调用的类 -->
	   <property name="targetObject" >
	   		<ref bean="sysService" />
	   </property>	
	   <!-- 调用类中的方法 -->
	   <property name="targetMethod" >
	   		<value>removeExpiredTokens</value>    
	   </property>    
    </bean>
    <!-- 定义触发时间 -->
    <bean id="trigger1" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
	   	<property name="jobDetail" 	ref="removeTokenTask" />
	    <property name="cronExpression" value="10 0/1 * * * ?" />
    </bean>
    
    <bean id="updateExchangeRate" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
	   <!-- 调用的类 -->
	   <property name="targetObject" >
	   		<ref bean="exchangeRateServiceImpl" />
	   </property>	
	   <!-- 调用类中的方法 -->
	   <property name="targetMethod" >
	   		<value>updateExchangeRate</value>    
	   </property>    
    </bean>     
     <!-- 定义触发时间 -->
    <bean id="trigger2" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
	   	<property name="jobDetail" 	ref="updateExchangeRate" />
	    <property name="cronExpression" value="0 0 8 * * ?" />
    </bean>
    <!-- 总管理类 如果将lazy-init='false‘那么容器启动就会执行调度程序  -->
    <bean id="startQuertz" lazy-init="true" autowire="no" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
	    <property name="triggers">
		    <list>
		    	<ref bean="trigger1"/>	
		    	<ref bean="trigger2"/>		    	
		    </list>
    	</property>
    </bean>
    
  <!--日志AOP  -->
     <context:component-scan base-package="com.yootii.bdy.solr"/>
    <aop:aspectj-autoproxy proxy-target-class="true" /> <!-- 开启@Aspect支持 -->
    <bean id="solrLogAopHandler" class="com.yootii.bdy.solr.SolrLogAopHandler"/> 
</beans>  