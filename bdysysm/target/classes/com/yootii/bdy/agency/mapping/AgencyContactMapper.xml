<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yootii.bdy.agency.dao.AgencyContactMapper">
  <resultMap id="BaseResultMap" type="com.yootii.bdy.agency.model.AgencyContact">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="agencyId" jdbcType="INTEGER" property="agencyId" />
    <result column="userId" jdbcType="INTEGER" property="userId" />
    <result column="custId" jdbcType="INTEGER" property="custId" />
  </resultMap>
  <sql id="Base_Column_List">
    id, agencyId, userId, custId
  </sql>
  <sql id="User_Column_List">
    b.userId, b.username, b.fullname, b.email, b.phone, b.sex, b.address,b.userType,b.locked
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from agency_contact
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectUsers" parameterType="com.yootii.bdy.agency.model.AgencyContact" resultType="com.yootii.bdy.user.model.User">
    select 
    <include refid="User_Column_List" />
    FROM bdy_db.agency_contact a
	left join user b on a.userId = b.userId
    where a.agencyId = #{agencyId,jdbcType=INTEGER}
    and a.custId = #{custId,jdbcType=INTEGER}
  </select>
  <select id="selectAgencyContact" parameterType="com.yootii.bdy.agency.model.AgencyContact" resultType="map">
    select a.id as agencyContactId,b.userId, b.username, b.fullname, b.email, b.phone, b.sex, b.address,b.userType,b.locked,
    c.postcode
    FROM bdy_db.agency_contact a
	left join user b on a.userId = b.userId
	left join agency c on a.agencyId=c.id
    where a.agencyId = #{agencyId,jdbcType=INTEGER}
    and a.custId = #{custId,jdbcType=INTEGER}
  </select>
  <select id="selectByAgencyId" resultType="map">
    select a.id as agencyContactId,b.userId, b.username, b.fullname,a.custId,c.name
    FROM bdy_db.agency_contact a
	left join user b on a.userId = b.userId
    left join customer c on a.custId = c.id
     <bind name="agencyContact.agencyId" value="agencyContact.agencyId" /> 
    where a.agencyId = #{agencyContact.agencyId,jdbcType=INTEGER}
    <choose>
	   	<when test="gcon.keyword!=null and gcon.keyword!=''">
			<bind name="gcon.keyword" value="'%' + gcon.keyword + '%'" />
			and (c.name like #{gcon.keyword,jdbcType=VARCHAR}
			or b.fullname like #{gcon.keyword,jdbcType=VARCHAR}
			)
		</when> 
		<otherwise>
			<if test="name!=null and name!=''">
				<bind name="name" value="'%' + name + '%'" />
				and c.name like #{name,jdbcType=VARCHAR}
			</if>
			<if test="fullname!=null and fullname!=''">
				<bind name="fullname" value="'%' + fullname + '%'" />
				and b.fullname like #{fullname,jdbcType=VARCHAR}
			</if>
		</otherwise>
	</choose>
    order by c.name
    <bind name="gcon.offset" value="gcon.offset" /> 
	<bind name="gcon.rows" value="gcon.rows" /> 
	<if test="gcon.rows != null and gcon.offset != null">
		limit #{gcon.offset,jdbcType=INTEGER}, #{gcon.rows,jdbcType=INTEGER}
	</if>
  </select>
  <select id="selectByAgencyIdCount" resultType="long">
    select count(*) as count
    FROM bdy_db.agency_contact a
	left join user b on a.userId = b.userId
    left join customer c on a.custId = c.id
     <bind name="agencyContact.agencyId" value="agencyContact.agencyId" /> 
    where a.agencyId = #{agencyContact.agencyId,jdbcType=INTEGER}
    <choose>
	   	<when test="gcon.keyword!=null and gcon.keyword!=''">
			<bind name="gcon.keyword" value="'%' + gcon.keyword + '%'" />
			and (c.name like #{gcon.keyword,jdbcType=VARCHAR}
			or b.fullname like #{gcon.keyword,jdbcType=VARCHAR}
			)
		</when> 
		<otherwise>
			<if test="name!=null and name!=''">
				<bind name="name" value="'%' + name + '%'" />
				and c.name like #{name,jdbcType=VARCHAR}
			</if>
			<if test="fullname!=null and fullname!=''">
				<bind name="fullname" value="'%' + fullname + '%'" />
				and b.fullname like #{fullname,jdbcType=VARCHAR}
			</if>
		</otherwise>
	</choose>
  </select>
  <select id="checkAgencyContact" parameterType="com.yootii.bdy.agency.model.AgencyContact" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from agency_contact
    where agencyId = #{agencyId,jdbcType=INTEGER}
    and custId = #{custId,jdbcType=INTEGER} and userId=#{userId,jdbcType=INTEGER} 
    limit 1
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from agency_contact
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.yootii.bdy.agency.model.AgencyContact">
    insert into agency_contact (id, agencyId, userId, 
      custId)
    values (#{id,jdbcType=INTEGER}, #{agencyId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, 
      #{custId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.yootii.bdy.agency.model.AgencyContact">
    insert into agency_contact
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="agencyId != null">
        agencyId,
      </if>
      <if test="userId != null">
        userId,
      </if>
      <if test="custId != null">
        custId,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="agencyId != null">
        #{agencyId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="custId != null">
        #{custId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.yootii.bdy.agency.model.AgencyContact">
    update agency_contact
    <set>
      <if test="agencyId != null">
        agencyId = #{agencyId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        userId = #{userId,jdbcType=INTEGER},
      </if>
      <if test="custId != null">
        custId = #{custId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yootii.bdy.agency.model.AgencyContact">
    update agency_contact
    set agencyId = #{agencyId,jdbcType=INTEGER},
      userId = #{userId,jdbcType=INTEGER},
      custId = #{custId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <!-- 判断是否有相同的username -->
  <select id="isExist" resultType="int">
  	SELECT count(id) FROM customer WHERE username =#{username}
  </select>
  <!-- 添加新用户 -->
  <insert id="addCustomer" parameterType="java.util.Map">
  		INSERT INTO customer(
  				username,
  				`password`,
  				email,
  				phone,
  				registerType
  				)VALUES(
  				#{username},
  				#{password},
  				#{email},
  				#{phone},
  				1
  				)
  </insert>
  
  <!-- 完善该客户信息 -->
  <update id="updateCustomer" parameterType="com.yootii.bdy.customer.model.Customer">
  		UPDATE customer SET
  			name = #{name},
  			address =#{address},
  			country =#{country},
  			fullname =#{fullname}
  		 WHERE id = #{id}
  </update>
  <!-- 查询代理所下的代理人信息 -->
  <select id="queryProxy" resultType="java.util.Map">
  	SELECT b.*
	FROM agency_user a , `user` b
	WHERE a.userId = b.userId AND a.agencyId = #{id}
  </select>
  <!-- 同步机构联系人表 -->
  <insert id="insertAgencyContact" parameterType="java.util.Map">
  	INSERT INTO agency_contact(
  						agencyId,
  						userId,
  						custId)
  				 VALUES(
  				 		#{agencyId},
  				 		#{userId},
  				 		#{custId}
  				 		)
  </insert>
  
  <!-- 根据id 查询客户 -->
  <select id="queryCustomerById" resultType="java.util.Map">
  	SELECT id,
  		 name,
  		 address,
  		 email,
  		 phone 
  	from customer WHERE id = #{id}
  </select>
  <!--  -->
  <select id="checkExist" resultType="int">
  	SELECT count(id) FROM customer_contact where custId = #{custId}
  </select>
  <!--同步  customer_contact表  -->
  <insert id="insertCustomerContact" parameterType="java.util.Map">
  	INSERT INTO customer_contact(
  						name,
  						address,
  						tel,
  						email,
  						custId)
  				 VALUES(
  				 		#{name},
  				 		#{address},
  				 		#{phone},
  				 		#{email},
  				 		#{id}
  				 		)
  </insert>
  <!--检验访客合法性  -->
  <select id="validCaller" resultType="int">
  		SELECT count(userId) 
  		FROM `user` 
  		WHERE username=#{username} 
  		AND password=#{password}
  </select>
  
</mapper>